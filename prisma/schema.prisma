// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model SocialUser{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String @unique
  image String?
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified   DateTime?
  password String?
  image String?
  
  saved String[] @default([])
  followers String[] @default([])
  following String[] @default([])

  bio String @default("No information given.")
  theme String @default("corporate")
  
  posts Post[] @relation("author")
  tagged Post[] @relation("tagged")
  comments Comment[]
  accounts Account[]
  notifications Notification[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  author User @relation(fields: [authorId],references: [id], name:"author")
  authorId String @db.ObjectId
  caption String?
  tagged User? @relation(fields: [taggedId],references: [id], name:"tagged")
  taggedId String? @db.ObjectId
  image String
  likes String[]
  createdAt DateTime @default(now())

  comments Comment[]
}

model Comment{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  author User @relation(fields: [authorId],references: [id])
  authorId String @db.ObjectId
  post Post @relation(fields: [postId],references: [id])
  postId String @db.ObjectId
  commentText String
  createdAt DateTime @default(now())
  likes String[]
}

model Notification{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    owner User @relation(fields: [ownerId],references: [id])
    ownerId String @db.ObjectId
    userName String
    userImage String
    createdAt DateTime @default(now())
    link String
    type String
    seen Boolean @default(false)
}